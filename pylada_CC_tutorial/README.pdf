%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<<
/F1 2 0 R /F2 3 0 R /F3 4 0 R /F4 5 0 R /F5 6 0 R /F6 8 0 R
>>
endobj
2 0 obj
<<
/BaseFont /Helvetica /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font
>>
endobj
3 0 obj
<<
/BaseFont /Times-Roman /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font
>>
endobj
4 0 obj
<<
/BaseFont /Courier /Encoding /WinAnsiEncoding /Name /F3 /Subtype /Type1 /Type /Font
>>
endobj
5 0 obj
<<
/BaseFont /Courier-Bold /Encoding /WinAnsiEncoding /Name /F4 /Subtype /Type1 /Type /Font
>>
endobj
6 0 obj
<<
/BaseFont /Courier-Oblique /Encoding /WinAnsiEncoding /Name /F5 /Subtype /Type1 /Type /Font
>>
endobj
7 0 obj
<<
/Contents 24 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 23 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
8 0 obj
<<
/BaseFont /Helvetica-Oblique /Encoding /WinAnsiEncoding /Name /F6 /Subtype /Type1 /Type /Font
>>
endobj
9 0 obj
<<
/Contents 25 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 23 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
10 0 obj
<<
/Contents 26 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 23 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
11 0 obj
<<
/Outlines 13 0 R /PageLabels 27 0 R /PageMode /UseNone /Pages 23 0 R /Type /Catalog
>>
endobj
12 0 obj
<<
/Author () /CreationDate (D:20221125134004+05'00') /Creator (\(unspecified\)) /Keywords () /ModDate (D:20221125134004+05'00') /Producer (ReportLab PDF Library - www.reportlab.com) 
  /Subject (\(unspecified\)) /Title (A Simple Guide to Using Pylada) /Trapped /False
>>
endobj
13 0 obj
<<
/Count 11 /First 14 0 R /Last 15 0 R /Type /Outlines
>>
endobj
14 0 obj
<<
/Dest [ 7 0 R /XYZ 57.02362 681.0236 0 ] /Next 15 0 R /Parent 13 0 R /Title (Installation)
>>
endobj
15 0 obj
<<
/Count 7 /Dest [ 9 0 R /XYZ 57.02362 765.0236 0 ] /First 16 0 R /Last 22 0 R /Parent 13 0 R /Prev 14 0 R 
  /Title (Usage)
>>
endobj
16 0 obj
<<
/Count 4 /Dest [ 9 0 R /XYZ 57.02362 702.0236 0 ] /First 17 0 R /Last 20 0 R /Next 21 0 R /Parent 15 0 R 
  /Title (Submission script)
>>
endobj
17 0 obj
<<
/Dest [ 9 0 R /XYZ 57.02362 654.0236 0 ] /Next 18 0 R /Parent 16 0 R /Title (Setting VASP files)
>>
endobj
18 0 obj
<<
/Dest [ 9 0 R /XYZ 57.02362 527.8236 0 ] /Next 19 0 R /Parent 16 0 R /Prev 17 0 R /Title (Setting pseudopotentials)
>>
endobj
19 0 obj
<<
/Dest [ 9 0 R /XYZ 57.02362 425.6236 0 ] /Next 20 0 R /Parent 16 0 R /Prev 18 0 R /Title (Setting INCAR parameters)
>>
endobj
20 0 obj
<<
/Dest [ 9 0 R /XYZ 57.02362 139.8236 0 ] /Parent 16 0 R /Prev 19 0 R /Title (Setting the input and output directories)
>>
endobj
21 0 obj
<<
/Dest [ 10 0 R /XYZ 57.02362 608.4279 0 ] /Next 22 0 R /Parent 15 0 R /Prev 16 0 R /Title (Launching jobs)
>>
endobj
22 0 obj
<<
/Dest [ 10 0 R /XYZ 57.02362 391.1203 0 ] /Parent 15 0 R /Prev 21 0 R /Title (Extracting Data)
>>
endobj
23 0 obj
<<
/Count 3 /Kids [ 7 0 R 9 0 R 10 0 R ] /Type /Pages
>>
endobj
24 0 obj
<<
/Length 7182
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 57.02362 741.0236 cm
q
.133333 .133333 .133333 rg
BT 1 0 0 1 0 4 Tm /F2 20 Tf 24 TL 109.2242 0 Td (A Simple Guide to Using Pylada) Tj T* -109.2242 0 Td ET
Q
Q
q
1 0 0 1 57.02362 693.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Here is a quick guide to using Pylada on Compute Canada machines.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 660.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf .133333 .133333 .133333 rg (Installation) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 642.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (To install Pylada on Niagara \(or any cc computer\) do this) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 636.0236 cm
Q
q
1 0 0 1 57.02362 574.8236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.941176 .972549 1 rg
n -6 -6 460.0283 60 re B*
Q
q
.533333 .533333 .533333 rg
BT 1 0 0 1 0 38 Tm /F3 10 Tf 12 TL (module load python cmake intel/2020u4) Tj T* (pip install --user --upgrade pip) Tj T* (pip install --user git+https://github.com/pylada/pylada-light) Tj T*  T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 574.8236 cm
Q
q
1 0 0 1 57.02362 556.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (I like to have it in a separate virtual environment:) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 550.8236 cm
Q
q
1 0 0 1 57.02362 465.6236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.941176 .972549 1 rg
n -6 -6 460.0283 84 re B*
Q
q
.533333 .533333 .533333 rg
BT 1 0 0 1 0 62 Tm /F3 10 Tf 12 TL (module load python cmake intel/2020u4) Tj T* (python -m venv pylada_env) Tj T* (source pylada_env/bin/activate) Tj T* (pip install --upgrade pip) Tj T* (pip install git+https://github.com/pylada/pylada-light) Tj T*  T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 465.6236 cm
Q
q
1 0 0 1 57.02362 423.6236 cm
q
BT 1 0 0 1 0 26 Tm .577917 Tw 12 TL /F1 10 Tf 0 0 0 rg (This should take a little while, because it needs to compile from source. After that you need to copy the file) Tj T* 0 Tw .27135 Tw /F3 10 Tf (.pylada) Tj /F1 10 Tf ( in your home directory \(this file maybe hidden, but it is in this folder!\). At line 20 of that file change) Tj T* 0 Tw (my username for yours) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 417.6236 cm
Q
q
1 0 0 1 57.02362 400.3584 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
q
.685128 0 0 .685128 0 0 cm
q
1 0 0 1 6.6 9.633233 cm
q
.662745 .662745 .662745 RG
.5 w
.941176 .972549 1 rg
n -6 -6 672 24 re B*
Q
q
.941176 .972549 1 rg
n 0 0 24 12 re f*
.941176 .972549 1 rg
n 42 0 6 12 re f*
.941176 .972549 1 rg
n 54 0 30 12 re f*
.941176 .972549 1 rg
n 84 0 12 12 re f*
.941176 .972549 1 rg
n 96 0 48 12 re f*
.941176 .972549 1 rg
n 144 0 6 12 re f*
.941176 .972549 1 rg
n 156 0 24 12 re f*
.941176 .972549 1 rg
n 180 0 6 12 re f*
.941176 .972549 1 rg
n 192 0 96 12 re f*
.941176 .972549 1 rg
n 288 0 12 12 re f*
.941176 .972549 1 rg
n 306 0 36 12 re f*
.941176 .972549 1 rg
n 342 0 6 12 re f*
.941176 .972549 1 rg
n 348 0 24 12 re f*
.941176 .972549 1 rg
n 372 0 6 12 re f*
.941176 .972549 1 rg
n 384 0 48 12 re f*
.941176 .972549 1 rg
n 432 0 6 12 re f*
.941176 .972549 1 rg
n 438 0 42 12 re f*
.941176 .972549 1 rg
n 480 0 6 12 re f*
.941176 .972549 1 rg
n 486 0 6 12 re f*
.941176 .972549 1 rg
n 492 0 66 12 re f*
.941176 .972549 1 rg
n 558 0 18 12 re f*
.941176 .972549 1 rg
n 576 0 6 12 re f*
.941176 .972549 1 rg
n 582 0 6 12 re f*
.941176 .972549 1 rg
n 588 0 6 12 re f*
.941176 .972549 1 rg
n 594 0 30 12 re f*
.941176 .972549 1 rg
n 624 0 6 12 re f*
.941176 .972549 1 rg
n 630 0 6 12 re f*
.941176 .972549 1 rg
n 636 0 12 12 re f*
.941176 .972549 1 rg
n 648 0 6 12 re f*
.941176 .972549 1 rg
n 654 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (jobs) Tj (   ) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg ( ) Tj (Popen) Tj (\([) Tj .729412 .129412 .129412 rg ('squeue') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('-u') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('your_user_name') Tj 0 0 0 rg (],) Tj ( ) Tj (stdout) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg (PIPE) Tj (,) Tj ( ) Tj (encoding) Tj .4 .4 .4 rg (=) Tj .729412 .129412 .129412 rg ('utf-8') Tj 0 0 0 rg (\)) Tj .4 .4 .4 rg (.) Tj 0 0 0 rg (communicate) Tj (\(\)[) Tj .4 .4 .4 rg (0) Tj 0 0 0 rg (]) Tj .4 .4 .4 rg (.) Tj 0 0 0 rg (split) Tj (\() Tj .729412 .129412 .129412 rg (') Tj /F4 10 Tf .733333 .4 .133333 rg (\\n) Tj /F3 10 Tf .729412 .129412 .129412 rg (') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 400.3584 cm
Q
q
1 0 0 1 57.02362 370.3584 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .520439 Tw (Lines 40-61 contain the slurm script that Pylada will use to launch jobs. Make sure to change L55-56 to the) Tj T* 0 Tw (correct modules and environment that you are using if you are on a different computer.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 364.3584 cm
Q
q
1 0 0 1 57.02362 63.15839 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.941176 .972549 1 rg
n -6 -6 460.0283 300 re B*
Q
q
.941176 .972549 1 rg
n 0 276 318 12 re f*
.941176 .972549 1 rg
n 0 252 60 12 re f*
.941176 .972549 1 rg
n 66 252 6 12 re f*
.941176 .972549 1 rg
n 84 252 102 12 re f*
.941176 .972549 1 rg
n 0 240 162 12 re f*
.941176 .972549 1 rg
n 0 228 144 12 re f*
.941176 .972549 1 rg
n 0 216 186 12 re f*
.941176 .972549 1 rg
n 0 204 114 12 re f*
.941176 .972549 1 rg
n 0 192 120 12 re f*
.941176 .972549 1 rg
n 0 180 150 12 re f*
.941176 .972549 1 rg
n 0 168 96 12 re f*
.941176 .972549 1 rg
n 0 156 96 12 re f*
.941176 .972549 1 rg
n 0 144 150 12 re f*
.941176 .972549 1 rg
n 0 132 108 12 re f*
.941176 .972549 1 rg
n 0 120 0 12 re f*
.941176 .972549 1 rg
n 0 108 312 12 re f*
.941176 .972549 1 rg
n 0 96 84 12 re f*
.941176 .972549 1 rg
n 0 84 0 12 re f*
.941176 .972549 1 rg
n 0 72 288 12 re f*
.941176 .972549 1 rg
n 0 60 282 12 re f*
.941176 .972549 1 rg
n 0 48 0 12 re f*
.941176 .972549 1 rg
n 0 36 48 12 re f*
.941176 .972549 1 rg
n 0 24 132 12 re f*
.941176 .972549 1 rg
n 0 12 48 12 re f*
.941176 .972549 1 rg
n 0 0 18 12 re f*
BT 1 0 0 1 0 278 Tm 12 TL /F5 10 Tf .25098 .501961 .501961 rg (##################### PBSSCRIPT #####################) Tj T* /F3 10 Tf 0 0 0 rg  T* .098039 .090196 .486275 rg (pbs_string) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg (  ) Tj .729412 .129412 .129412 rg ('''#!/bin/bash -x) Tj T* (#SBATCH --account={account}) Tj T* (#SBATCH --nodes={nnodes}) Tj T* (#SBATCH --ntasks-per-node={ppn}) Tj T* (#SBATCH --exclusive) Tj T* (#SBATCH --export=ALL) Tj T* (#SBATCH --time={walltime}) Tj T* (#SBATCH -o {out}) Tj T* (#SBATCH -e {err}) Tj T* (#SBATCH --job-name={name}) Tj T* (#SBATCH -p {queue}) Tj T*  T* (# Go to the directoy from which our job was launched) Tj T* (cd {directory}) Tj T*  T* (module load python cmake intel/2020u4 #This line) Tj T* (source ~/pylada_env/bin/activate #and this line) Tj T*  T* ({header}) Tj T* (python {scriptcommand}) Tj T* ({footer}) Tj T* (''') Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 57.02362 63.15839 cm
Q
 
endstream
endobj
25 0 obj
<<
/Length 8851
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 57.02362 744.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf .133333 .133333 .133333 rg (Usage) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 714.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .648138 Tw (Pylada can be used for a lot of different things such as manipulating crystal structures and finding primitive) Tj T* 0 Tw (cells. Here I will show you how to use it to submit VASP jobs.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 684.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf .133333 .133333 .133333 rg (Submission script) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 666.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Let's go through ) Tj /F3 10 Tf (HT_relax_example.ipy) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 639.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F2 12.5 Tf .133333 .133333 .133333 rg (Setting VASP files) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 621.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (At lines 26-30 you can set the location of the VASP executable and the pseudo-potentials:) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 539.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.941176 .972549 1 rg
n -6 -6 480.0283 72 re B*
Q
q
.941176 .972549 1 rg
n 0 48 162 12 re f*
.941176 .972549 1 rg
n 0 36 24 12 re f*
.941176 .972549 1 rg
n 24 36 6 12 re f*
.941176 .972549 1 rg
n 30 36 42 12 re f*
.941176 .972549 1 rg
n 78 36 6 12 re f*
.941176 .972549 1 rg
n 90 36 366 12 re f*
.941176 .972549 1 rg
n 0 24 24 12 re f*
.941176 .972549 1 rg
n 24 24 6 12 re f*
.941176 .972549 1 rg
n 30 24 48 12 re f*
.941176 .972549 1 rg
n 84 24 6 12 re f*
.941176 .972549 1 rg
n 96 24 30 12 re f*
.941176 .972549 1 rg
n 0 0 54 12 re f*
.941176 .972549 1 rg
n 60 0 6 12 re f*
.941176 .972549 1 rg
n 72 0 360 12 re f*
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf .25098 .501961 .501961 rg (# Program and file location) Tj /F3 10 Tf 0 0 0 rg  T* (vasp) Tj .4 .4 .4 rg (.) Tj 0 0 0 rg (program) Tj ( ) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('/scinet/niagara/software/commercial/vasp-6.1.2/bin/vasp_std') Tj 0 0 0 rg  T* (vasp) Tj .4 .4 .4 rg (.) Tj 0 0 0 rg (has_nlep) Tj ( ) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg ( ) Tj /F4 10 Tf 0 .501961 0 rg (False) Tj /F3 10 Tf 0 0 0 rg  T*  T* (pseudoDir) Tj ( ) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('/scinet/niagara/software/commercial/vasp-6.1.2/potpaw_PBE/') Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 512.8236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F2 12.5 Tf .133333 .133333 .133333 rg (Setting pseudopotentials) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 482.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .695702 Tw (The next few lines \(32-45\) set the pseudopotentials that you want to use for each element. This is useful if) Tj T* 0 Tw (you want to use ultrasoft PPs or if you want to use a version with d or f orbitals.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 437.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.941176 .972549 1 rg
n -6 -6 480.0283 36 re B*
Q
q
.941176 .972549 1 rg
n 0 12 24 12 re f*
.941176 .972549 1 rg
n 24 12 6 12 re f*
.941176 .972549 1 rg
n 30 12 60 12 re f*
.941176 .972549 1 rg
n 96 12 6 12 re f*
.941176 .972549 1 rg
n 108 12 18 12 re f*
.941176 .972549 1 rg
n 126 12 6 12 re f*
.941176 .972549 1 rg
n 138 12 54 12 re f*
.941176 .972549 1 rg
n 198 12 6 12 re f*
.941176 .972549 1 rg
n 210 12 24 12 re f*
.941176 .972549 1 rg
n 240 12 102 12 re f*
.941176 .972549 1 rg
n 0 0 24 12 re f*
.941176 .972549 1 rg
n 24 0 6 12 re f*
.941176 .972549 1 rg
n 30 0 60 12 re f*
.941176 .972549 1 rg
n 96 0 6 12 re f*
.941176 .972549 1 rg
n 108 0 18 12 re f*
.941176 .972549 1 rg
n 126 0 6 12 re f*
.941176 .972549 1 rg
n 138 0 54 12 re f*
.941176 .972549 1 rg
n 198 0 6 12 re f*
.941176 .972549 1 rg
n 210 0 36 12 re f*
.941176 .972549 1 rg
n 252 0 162 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F3 10 Tf 0 0 0 rg (vasp) Tj .4 .4 .4 rg (.) Tj 0 0 0 rg (add_specie) Tj ( ) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ("O") Tj 0 0 0 rg (,) Tj ( ) Tj (pseudoDir) Tj ( ) Tj .4 .4 .4 rg (+) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ("/O") Tj 0 0 0 rg ( ) Tj /F5 10 Tf .25098 .501961 .501961 rg (# To use the O PP) Tj /F3 10 Tf 0 0 0 rg  T* (vasp) Tj .4 .4 .4 rg (.) Tj 0 0 0 rg (add_specie) Tj ( ) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ("O") Tj 0 0 0 rg (,) Tj ( ) Tj (pseudoDir) Tj ( ) Tj .4 .4 .4 rg (+) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ("/O_s") Tj 0 0 0 rg ( ) Tj /F5 10 Tf .25098 .501961 .501961 rg (# To use the O ultrasoft PP) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 410.6236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F2 12.5 Tf .133333 .133333 .133333 rg (Setting INCAR parameters) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 392.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Lines 46-77 set the INCAR parameters. A few things to note:) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 359.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.941176 .972549 1 rg
n -6 -6 480.0283 24 re B*
Q
q
.941176 .972549 1 rg
n 0 0 24 12 re f*
.941176 .972549 1 rg
n 24 0 6 12 re f*
.941176 .972549 1 rg
n 30 0 66 12 re f*
.941176 .972549 1 rg
n 102 0 6 12 re f*
.941176 .972549 1 rg
n 114 0 36 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (vasp) Tj .4 .4 .4 rg (.) Tj 0 0 0 rg (convergence) Tj ( ) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (1.0e-3) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 315.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.213731 Tw (If you are relaxing cell parameters \(which is not the case in this file, see below\), it is good to do multiple) Tj T* 0 Tw .825522 Tw (relaxations because as you change the cell shape your basis set does not. Pylada does that automatically) Tj T* 0 Tw (and this set the convergence between each relaxation step.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 282.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.941176 .972549 1 rg
n -6 -6 480.0283 24 re B*
Q
q
.941176 .972549 1 rg
n 0 0 24 12 re f*
.941176 .972549 1 rg
n 24 0 6 12 re f*
.941176 .972549 1 rg
n 30 0 60 12 re f*
.941176 .972549 1 rg
n 96 0 6 12 re f*
.941176 .972549 1 rg
n 108 0 42 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (vasp) Tj .4 .4 .4 rg (.) Tj 0 0 0 rg (relaxation) Tj ( ) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ("ionic") Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 250.2236 cm
q
BT 1 0 0 1 0 14 Tm .00402 Tw 12 TL /F1 10 Tf 0 0 0 rg (This is where you set the type of relaxation \(ISIF\) the options are ) Tj /F3 10 Tf (static) Tj /F1 10 Tf (, ) Tj /F3 10 Tf (volume) Tj /F1 10 Tf (, ) Tj /F3 10 Tf (cellshape) Tj /F1 10 Tf ( and ) Tj /F3 10 Tf (ionic) Tj /F1 10 Tf (.) Tj T* 0 Tw (If you wanted to relax the volume shape and atoms you would do.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 217.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.941176 .972549 1 rg
n -6 -6 480.0283 24 re B*
Q
q
.941176 .972549 1 rg
n 0 0 24 12 re f*
.941176 .972549 1 rg
n 24 0 6 12 re f*
.941176 .972549 1 rg
n 30 0 60 12 re f*
.941176 .972549 1 rg
n 96 0 6 12 re f*
.941176 .972549 1 rg
n 108 0 144 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (vasp) Tj .4 .4 .4 rg (.) Tj 0 0 0 rg (relaxation) Tj ( ) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ("volume ionic cellshape") Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 185.0236 cm
q
BT 1 0 0 1 0 14 Tm 2.586962 Tw 12 TL /F1 10 Tf 0 0 0 rg (Most INCAR parameters can be set directly e.g. ) Tj /F3 10 Tf (NSW) Tj /F1 10 Tf ( is ) Tj /F3 10 Tf (vasp.nsw) Tj /F1 10 Tf (. If you are using a less common) Tj T* 0 Tw (parameters sometimes you need to ) Tj /F6 10 Tf (manually) Tj /F1 10 Tf ( add it using this command :) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 151.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.941176 .972549 1 rg
n -6 -6 480.0283 24 re B*
Q
q
.941176 .972549 1 rg
n 0 0 24 12 re f*
.941176 .972549 1 rg
n 24 0 6 12 re f*
.941176 .972549 1 rg
n 30 0 66 12 re f*
.941176 .972549 1 rg
n 96 0 6 12 re f*
.941176 .972549 1 rg
n 102 0 54 12 re f*
.941176 .972549 1 rg
n 156 0 6 12 re f*
.941176 .972549 1 rg
n 168 0 6 12 re f*
.941176 .972549 1 rg
n 174 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (vasp) Tj .4 .4 .4 rg (.) Tj 0 0 0 rg (add_keyword) Tj (\() Tj .729412 .129412 .129412 rg ("NUPDOWN") Tj 0 0 0 rg (,) Tj ( ) Tj .4 .4 .4 rg (2) Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 124.8236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F2 12.5 Tf .133333 .133333 .133333 rg (Setting the input and output directories) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 94.82362 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.006439 Tw (Lines 79-98 go through input files and add them to a list of structures. This is where I set the input and output) Tj T* 0 Tw (directories and their naming conventions.) Tj T* ET
Q
Q
 
endstream
endobj
26 0 obj
<<
/Length 8223
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 57.02362 664.4279 cm
q
q
.755223 0 0 .755223 0 0 cm
q
1 0 0 1 6.6 8.739136 cm
q
.662745 .662745 .662745 RG
.5 w
.941176 .972549 1 rg
n -6 -6 636 132 re B*
Q
q
.941176 .972549 1 rg
n 0 108 60 12 re f*
.941176 .972549 1 rg
n 60 108 6 12 re f*
.941176 .972549 1 rg
n 66 108 12 12 re f*
.941176 .972549 1 rg
n 0 84 24 12 re f*
.941176 .972549 1 rg
n 30 84 6 12 re f*
.941176 .972549 1 rg
n 42 84 48 12 re f*
.941176 .972549 1 rg
n 90 84 12 12 re f*
.941176 .972549 1 rg
n 0 72 18 12 re f*
.941176 .972549 1 rg
n 24 72 36 12 re f*
.941176 .972549 1 rg
n 66 72 12 12 re f*
.941176 .972549 1 rg
n 84 72 30 12 re f*
.941176 .972549 1 rg
n 114 72 6 12 re f*
.941176 .972549 1 rg
n 120 72 60 12 re f*
.941176 .972549 1 rg
n 180 72 12 12 re f*
.941176 .972549 1 rg
n 198 72 12 12 re f*
.941176 .972549 1 rg
n 210 72 6 12 re f*
.941176 .972549 1 rg
n 216 72 312 12 re f*
.941176 .972549 1 rg
n 24 48 6 12 re f*
.941176 .972549 1 rg
n 30 48 6 12 re f*
.941176 .972549 1 rg
n 36 48 24 12 re f*
.941176 .972549 1 rg
n 60 48 6 12 re f*
.941176 .972549 1 rg
n 66 48 36 12 re f*
.941176 .972549 1 rg
n 102 48 6 12 re f*
.941176 .972549 1 rg
n 108 48 36 12 re f*
.941176 .972549 1 rg
n 144 48 6 12 re f*
.941176 .972549 1 rg
n 24 36 6 12 re f*
.941176 .972549 1 rg
n 30 36 6 12 re f*
.941176 .972549 1 rg
n 36 36 24 12 re f*
.941176 .972549 1 rg
n 60 36 6 12 re f*
.941176 .972549 1 rg
n 66 36 12 12 re f*
.941176 .972549 1 rg
n 24 24 24 12 re f*
.941176 .972549 1 rg
n 48 24 6 12 re f*
.941176 .972549 1 rg
n 54 24 54 12 re f*
.941176 .972549 1 rg
n 108 24 6 12 re f*
.941176 .972549 1 rg
n 114 24 36 12 re f*
.941176 .972549 1 rg
n 150 24 6 12 re f*
.941176 .972549 1 rg
n 156 24 36 12 re f*
.941176 .972549 1 rg
n 192 24 6 12 re f*
.941176 .972549 1 rg
n 198 24 36 12 re f*
.941176 .972549 1 rg
n 234 24 6 12 re f*
.941176 .972549 1 rg
n 240 24 18 12 re f*
.941176 .972549 1 rg
n 258 24 6 12 re f*
.941176 .972549 1 rg
n 264 24 6 12 re f*
.941176 .972549 1 rg
n 270 24 6 12 re f*
.941176 .972549 1 rg
n 276 24 12 12 re f*
.941176 .972549 1 rg
n 294 24 12 12 re f*
.941176 .972549 1 rg
n 306 24 6 12 re f*
.941176 .972549 1 rg
n 312 24 312 12 re f*
.941176 .972549 1 rg
n 24 12 12 12 re f*
.941176 .972549 1 rg
n 42 12 24 12 re f*
.941176 .972549 1 rg
n 72 12 18 12 re f*
.941176 .972549 1 rg
n 96 12 12 12 re f*
.941176 .972549 1 rg
n 114 12 24 12 re f*
.941176 .972549 1 rg
n 138 12 6 12 re f*
.941176 .972549 1 rg
n 150 12 234 12 re f*
.941176 .972549 1 rg
n 48 0 60 12 re f*
.941176 .972549 1 rg
n 108 0 6 12 re f*
.941176 .972549 1 rg
n 114 0 24 12 re f*
.941176 .972549 1 rg
n 138 0 6 12 re f*
.941176 .972549 1 rg
n 144 0 6 12 re f*
.941176 .972549 1 rg
n 150 0 6 12 re f*
BT 1 0 0 1 0 110 Tm 12 TL /F3 10 Tf 0 0 0 rg (structures) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg ({}) Tj  T*  T* (jobs) Tj ( ) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg ( ) Tj (get_jobs) Tj (\(\)) Tj  T* /F4 10 Tf 0 .501961 0 rg (for) Tj /F3 10 Tf 0 0 0 rg ( ) Tj (poscar) Tj ( ) Tj /F4 10 Tf .666667 .133333 1 rg (in) Tj /F3 10 Tf 0 0 0 rg ( ) Tj (iglob) Tj (\() Tj .729412 .129412 .129412 rg ('POSCAR_*') Tj 0 0 0 rg (\):) Tj ( ) Tj /F5 10 Tf .25098 .501961 .501961 rg (# ) Tj (<) Tj (- This is where you set the input files     location) Tj /F3 10 Tf 0 0 0 rg  T*  T* (    ) Tj (s) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg (read) Tj .4 .4 .4 rg (.) Tj 0 0 0 rg (poscar) Tj (\() Tj (poscar) Tj (\)) Tj  T* (    ) Tj (s) Tj .4 .4 .4 rg (.) Tj 0 0 0 rg (name) Tj .4 .4 .4 rg (=) Tj .729412 .129412 .129412 rg ('') Tj 0 0 0 rg  T* (    ) Tj (name) Tj .4 .4 .4 rg (=) Tj .729412 .129412 .129412 rg ('output/') Tj .4 .4 .4 rg (+) Tj 0 0 0 rg (poscar) Tj ([) Tj (poscar) Tj .4 .4 .4 rg (.) Tj 0 0 0 rg (rindex) Tj (\() Tj .729412 .129412 .129412 rg ('_') Tj 0 0 0 rg (\)) Tj .4 .4 .4 rg (+) Tj (1) Tj 0 0 0 rg (:]) Tj ( ) Tj /F5 10 Tf .25098 .501961 .501961 rg (# ) Tj (<) Tj (- This is where you set the     output file location) Tj /F3 10 Tf 0 0 0 rg  T* (    ) Tj /F4 10 Tf 0 .501961 0 rg (if) Tj /F3 10 Tf 0 0 0 rg ( ) Tj (name) Tj ( ) Tj /F4 10 Tf .666667 .133333 1 rg (not) Tj /F3 10 Tf 0 0 0 rg ( ) Tj /F4 10 Tf .666667 .133333 1 rg (in) Tj /F3 10 Tf 0 0 0 rg ( ) Tj (jobs) Tj (:) Tj ( ) Tj /F5 10 Tf .25098 .501961 .501961 rg (# Making sure it is not already running) Tj /F3 10 Tf 0 0 0 rg  T* (        ) Tj (structures) Tj ([) Tj (name) Tj (]) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg (s) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 620.4279 cm
q
BT 1 0 0 1 0 26 Tm .147808 Tw 12 TL /F1 10 Tf 0 0 0 rg (The rest of the lines just add the structures to the ) Tj /F3 10 Tf (JobFolder\(\)) Tj /F1 10 Tf ( object which is the instance that will launch) Tj T* 0 Tw 1.731147 Tw (the jobs. This is where you could set ) Tj /F3 10 Tf (INCAR) Tj /F1 10 Tf ( parameters that are structure dependent like the magnetic) Tj T* 0 Tw (moment for example or ) Tj /F3 10 Tf (NPAR) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 590.4279 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf .133333 .133333 .133333 rg (Launching jobs) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 560.4279 cm
q
BT 1 0 0 1 0 14 Tm .101147 Tw 12 TL /F1 10 Tf 0 0 0 rg (To launch all the jobs on Niagara you can simply uncomment that last line of ) Tj /F3 10 Tf (HT_relax_example.ipy) Tj /F1 10 Tf ( and) Tj T* 0 Tw (run:) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 515.2279 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.941176 .972549 1 rg
n -6 -6 480.0283 36 re B*
Q
q
.533333 .533333 .533333 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL (ipython HT_relax_example.ipy) Tj T*  T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 495.2279 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (But I like to do it manually in Ipython so I can make sure everything is ok) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 435.1203 cm
q
q
.85143 0 0 .85143 0 0 cm
q
1 0 0 1 6.6 7.751663 cm
q
.662745 .662745 .662745 RG
.5 w
.941176 .972549 1 rg
n -6 -6 564 60 re B*
Q
q
.533333 .533333 .533333 rg
BT 1 0 0 1 0 38 Tm /F3 10 Tf 12 TL (ipython) Tj T* (In [1]: %run HT_relax_example.ipy) Tj T* (In [2]: %launch scattered --account=rrg-ovoznyy --walltime=24:00:00 --ppn=40 --queue=compute) Tj T*  T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 57.02362 403.1203 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.136019 Tw (The launch command controls the account you are using the amount of time you are asking for and your) Tj T* 0 Tw (queue. If you jobs have already finished Pylada will detect it and they won\222t be relaunched.) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 373.1203 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf .133333 .133333 .133333 rg (Extracting Data) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 343.1203 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .438917 Tw (Pylada makes it easy to extract a lot of information on the jobs once they are finished. To get information in) Tj T* 0 Tw (python or Ipython do:) Tj T* ET
Q
Q
q
1 0 0 1 57.02362 249.9203 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.941176 .972549 1 rg
n -6 -6 480.0283 84 re B*
Q
q
.941176 .972549 1 rg
n 0 60 36 12 re f*
.941176 .972549 1 rg
n 0 48 6 12 re f*
.941176 .972549 1 rg
n 6 48 6 12 re f*
.941176 .972549 1 rg
n 12 48 6 12 re f*
.941176 .972549 1 rg
n 18 48 270 12 re f*
.941176 .972549 1 rg
n 0 36 6 12 re f*
.941176 .972549 1 rg
n 6 36 6 12 re f*
.941176 .972549 1 rg
n 12 36 6 12 re f*
.941176 .972549 1 rg
n 18 36 252 12 re f*
.941176 .972549 1 rg
n 0 24 6 12 re f*
.941176 .972549 1 rg
n 6 24 6 12 re f*
.941176 .972549 1 rg
n 12 24 6 12 re f*
.941176 .972549 1 rg
n 18 24 342 12 re f*
.941176 .972549 1 rg
n 0 12 6 12 re f*
.941176 .972549 1 rg
n 6 12 6 12 re f*
.941176 .972549 1 rg
n 12 12 6 12 re f*
.941176 .972549 1 rg
n 18 12 288 12 re f*
.941176 .972549 1 rg
n 0 0 6 12 re f*
.941176 .972549 1 rg
n 6 0 6 12 re f*
.941176 .972549 1 rg
n 12 0 6 12 re f*
.941176 .972549 1 rg
n 18 0 78 12 re f*
BT 1 0 0 1 0 62 Tm 12 TL /F3 10 Tf .533333 .533333 .533333 rg (python) Tj T* (>) Tj (>) Tj (>) Tj ( from pylada.vasp import Extract, MassExtract) Tj T* (>) Tj (>) Tj (>) Tj ( allresults = MassExtract\("output_folder"\)) Tj T* (>) Tj (>) Tj (>) Tj ( dir\(allresults\) # To get a list of availables quantities) Tj T* (>) Tj (>) Tj (>) Tj ( results = Extract\("output_folder/specific_run"\)) Tj T* (>) Tj (>) Tj (>) Tj ( dir\(results\)) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
27 0 obj
<<
/Nums [ 0 28 0 R 1 29 0 R 2 30 0 R ]
>>
endobj
28 0 obj
<<
/S /D /St 1
>>
endobj
29 0 obj
<<
/S /D /St 2
>>
endobj
30 0 obj
<<
/S /D /St 3
>>
endobj
xref
0 31
0000000000 65535 f 
0000000073 00000 n 
0000000154 00000 n 
0000000261 00000 n 
0000000370 00000 n 
0000000475 00000 n 
0000000585 00000 n 
0000000698 00000 n 
0000000903 00000 n 
0000001018 00000 n 
0000001223 00000 n 
0000001429 00000 n 
0000001535 00000 n 
0000001823 00000 n 
0000001898 00000 n 
0000002011 00000 n 
0000002156 00000 n 
0000002313 00000 n 
0000002432 00000 n 
0000002570 00000 n 
0000002708 00000 n 
0000002849 00000 n 
0000002978 00000 n 
0000003095 00000 n 
0000003168 00000 n 
0000010402 00000 n 
0000019305 00000 n 
0000027580 00000 n 
0000027639 00000 n 
0000027673 00000 n 
0000027707 00000 n 
trailer
<<
/ID 
[<8c200971427bf8cdb9f2d1ece4a2739d><8c200971427bf8cdb9f2d1ece4a2739d>]
% ReportLab generated PDF document -- digest (http://www.reportlab.com)

/Info 12 0 R
/Root 11 0 R
/Size 31
>>
startxref
27741
%%EOF
